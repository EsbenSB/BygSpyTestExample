@page "/subscriptionPage"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject IHttpClientFactory ClientFactory
@using System.Text.Json
@using System.Text
@using BygSpy.Models

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Add New Object</h2>
                    <form>
                        <div class="form-group">
                            <label>Object Name:</label>
                            <input type="text"  class="form-control" @bind="newObjectName" />
                        </div>
                        <div class="form-group">
                            <label>Address:</label>
                            <input type="text" class="form-control" @bind="newObjectAddress" />
                        </div>
                        <button @onclick="() => AddObject(spyId)" type="submit" class="btn btn-primary btn-block">Add Object</button>
                    </form>
                    <hr />

                    <h2 class="card-title text-center mb-4">Configuration</h2>
                    @foreach (var obj in ConfigObjects)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="obj.IsSelected" />
                            <label class="form-check-label" for="@($"checkbox-{obj.Name}")">@obj.Name</label>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Subscribed Objects</h2>
                    <ul class="list-group">
                        @foreach (var obj in spyObjects)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <NavLink class="nav-link justify-content-end" @onclick="() => NavigateToSubscribedObject(obj.Id)" >@obj.newobjectName - @obj.Street @obj.City</NavLink>
                                <button class="btn btn-danger" @onclick="() => DeleteSpyObject(obj.Id)">Remove</button>
                            </li>
                        }
                        <div class="row">
                            <div class="col-10">
                            </div>
                            <div class="col-1">
                                <NavLink class="nav-link" href="Index">
                                    <button class="btn btn-primary">Back</button>
                                </NavLink>
                            </div>
                            <div class="col-1">
                            </div>
                        </div>
                    </ul>
                </div>
            </div>

            
        </div>
    </div>
</div>

@code {
    private string? spyId;
    public List<SpyingObject> spyObjects = new List<SpyingObject>();
    private string newObjectName;
    private string newObjectAddress;
    private string selectedAddress;
    private ObjectModel selectedObject;
    
    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var parameterName = "spyId";

        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue(parameterName, out var value))
        {
            spyId = value;
            await GetSpyObject();
        }
    }

    public class ObjectModel
    {
        public string? Name { get; set; }
        public bool IsSelected { get; set; } 
    }
    private List<ObjectModel> ConfigObjects = new List<ObjectModel>
    {
        new ObjectModel { Name = "Config 1"},
        new ObjectModel { Name = "Config 2"},
        new ObjectModel { Name = "Config 3" }
    };

    protected async Task GetSpyObject()
    {
        try
        {
            var client = ClientFactory.CreateClient();
            var response = await client.GetAsync("https://localhost:7299/api/spyingobject");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var spiesList = JsonSerializer.Deserialize<List<SpyingObject>>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                spyObjects = spiesList.Where(spyObjects => spyObjects.spyId == spyId).ToList();
            }
            else
            {
                Console.WriteLine($"Failed to retrieve spies. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task AddObject(string spyid)
    {
        try
        {           
            var spyObject = new SpyModel
                {
                    Id = "ThisIsBecauseIdAtBackEndNeed42CharactersToWorkSoIWriteThisToMakeItWorkPlzWorkGodDammit",
                    SpyId = spyid,
                    Adress = newObjectAddress,
                    NewObjectName = newObjectName
                };

            var client = ClientFactory.CreateClient();
            var json = JsonSerializer.Serialize(spyObject);

            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await client.PostAsync($"https://localhost:7299/api/spyingobject?spyId={spyid}", content);
            
            if (response.IsSuccessStatusCode)
            {
                StateHasChanged();
                await GetSpyObject();
            }
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    protected async Task DeleteSpyObject(string id)
    {
        try
        {
            var client = ClientFactory.CreateClient();
            var response = await client.DeleteAsync($"https://localhost:7299/api/spyingobject/{id}");

            if (response.IsSuccessStatusCode)
            {
                StateHasChanged();
                await GetSpyObject();
            }
            else
            {
                Console.WriteLine($"Failed to delete spying object with ID {id}. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }


    protected async Task NavigateToSubscribedObject(string id)
    {
        NavManager.NavigateTo($"/SpyInformationCompontent?spyObjectId={id}");
    }


}