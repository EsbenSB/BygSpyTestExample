@page "/subscriptionPage"
@using BygSpy.Models;

@using System.Text.Json
@using System.Text
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject IHttpClientFactory ClientFactory
<div class="container">
    <div class="row justify-content-center">
        <!-- Column for adding new object and configuration -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <!-- Add New Object form -->
                    <h2 class="card-title text-center mb-4">Add New Object</h2>
                    <form>
                        <div class="form-group">
                            <label>Object Name:</label>
                            <input type="text" class="form-control" @bind="newObjectName" />
                        </div>
                        <div class="form-group">
                            <label>Address:</label>
                            <input type="text" class="form-control" @bind="newObjectAddress" />
                        </div>
                        <button type="submit" class="btn btn-primary btn-block">Add Object</button>
                    </form>
                    <hr />

                    <!-- Configuration -->
                    <h2 class="card-title text-center mb-4">Configuration</h2>
                    @foreach (var obj in subscribedObjects)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="obj.IsSelected" />
                            <label class="form-check-label" for="@($"checkbox-{obj.Name}")">@obj.Name</label>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Subscribed Objects</h2>
                    <ul class="list-group">
                        @foreach (var obj in subscribedObjects)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <NavLink class="nav-link justify-content-end" href="@GetSpyInformationComponentUrl(obj.Name)">@obj.Name - @obj.Address</NavLink>
                                <button class="btn btn-danger">Remove</button>
                            </li>
                        }
                        <div class="row">
                            <div class="col-10">
                            </div>
                            <div class="col-1">
                                <NavLink class="nav-link" href="Index">
                                    <button class="btn btn-primary">Back</button>
                                </NavLink>
                            </div>
                            <div class="col-1">
                            </div>
                        </div>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public string Username { get; set; }


    protected override async void OnInitialized()
    {
        // Retrieve the value of the query parameter from the NavigationManager
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var parameterName = "Username";

        // Check if the query parameters contain the desired parameter
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue(parameterName, out var value))
        {
            // Assign the value to the parameterValue variable
            Username = value;
        }
        await GetSpies();
        StateHasChanged();
    }

    public class ObjectModel
    {
        public string Name { get; set; }
        public string Address { get; set; }
        public bool IsSelected { get; set; } // Checkbox state
    }

    // List of objects
    private List<ObjectModel> subscribedObjects = new List<ObjectModel>
    {
        new ObjectModel { Name = "Object 1", Address = "Address 1" },
        new ObjectModel { Name = "Object 2", Address = "Address 2" },
        new ObjectModel { Name = "Object 3", Address = "Address 3" }
    };

    // New object details
    private string newObjectName;
    private string newObjectAddress;

    // Selected address to track
    private string selectedAddress;

    // Selected object for information popup
    private ObjectModel selectedObject;

    // List of unique addresses
    private List<string> objectAddresses => subscribedObjects.Select(obj => obj.Address).Distinct().ToList();

    // Get URL for Spy Information Component
    private string GetSpyInformationComponentUrl(string spyName)
    {
        return $"subscriptionPage/{spyName}";
    }

    // Add a new object
    private void AddObject()
    {
        subscribedObjects.Add(new ObjectModel { Name = newObjectName, Address = newObjectAddress });
        newObjectName = "";
        newObjectAddress = "";
    }

    // Remove an object
    private void RemoveObject(ObjectModel obj)
    {
        subscribedObjects.Remove(obj);
    }

    // Show object information popup
    private void ShowObjectPopup(ObjectModel obj)
    {
        selectedObject = obj;
        // JSRuntime.InvokeVoidAsync("$('#objectInfoModal').modal('show')");
    }


    protected async Task<List<SpyModel>> GetSpies()
    {
        try
        {
            var client = ClientFactory.CreateClient();
            var response = await client.GetAsync("https://localhost:7299/api/spyingobject");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var spies = JsonSerializer.Deserialize<List<SpyModel>>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                // Filter out spies whose Name is not equal to Username
                var filteredSpies = spies.Where(spy => spy.User == Username).ToList();

                return filteredSpies;
            }
            else
            {
                Console.WriteLine($"Failed to retrieve spies. Status code: {response.StatusCode}");
                return new List<SpyModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            return new List<SpyModel>();
        }
    }
}
