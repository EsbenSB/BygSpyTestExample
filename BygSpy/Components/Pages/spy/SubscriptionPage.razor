
@page "/subscriptionPage"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject IHttpClientFactory ClientFactory
@using System.Text.Json
@using System.Text
@using BygSpy.Models
<div class="container">
    <div class="row justify-content-center">
        <!-- Column for adding new object and configuration -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <!-- Add New Object form -->
                    <h2 class="card-title text-center mb-4">Add New Object</h2>
                    <form>
                        <div class="form-group">
                            <label>Object Name:</label>
                            <input type="text"  class="form-control" @bind="newObjectName" />
                        </div>
                        <div class="form-group">
                            <label>Address:</label>
                            <input type="text" class="form-control" @bind="newObjectAddress" />
                        </div>
                        <button @onclick="AddObject" type="submit" class="btn btn-primary btn-block">Add Object</button>
                    </form>
                    <hr />

                    <!-- Configuration -->
                    <h2 class="card-title text-center mb-4">Configuration</h2>
                    @foreach (var obj in subscribedObjects)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="obj.IsSelected" />
                            <label class="form-check-label" for="@($"checkbox-{obj.Name}")">@obj.Name</label>
                        </div>
                    }

               
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Subscribed Objects</h2>
                    <ul class="list-group">
                        @foreach (var obj in spyingObjects)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <NavLink class="nav-link justify-content-end" href="SpyInformationCompontent">@obj.newobjectName - @obj.adress</NavLink>
                                <button class="btn btn-danger" >Remove</button>
                            </li>
                        }
                        <div class="row">
                            <div class="col-10">
                            </div>
                            <div class="col-1">
                                <NavLink class="nav-link" href="Index">
                                    <button class="btn btn-primary">Back</button>
                                </NavLink>

                            </div>
                            <div class="col-1">
                            </div>
                        </div>
                    </ul>
                </div>
            </div>

            
        </div>
    </div>
</div>

@code {
    // todo fix backknappen tror den skal ha noget mere plads

    List<SpyModel> spyingObjects = new List<SpyModel>();

    private string spyObjectName;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var parameterName = "spyObject";

        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue(parameterName, out var value))
        {
            spyObjectName = value;
            await GetSpyingObjects();
        }
    }

    public class ObjectModel
    {
        public string Name { get; set; }
        public string Address { get; set; }
        public bool IsSelected { get; set; } // Checkbox state
    }
    // List of objects
    private List<ObjectModel> subscribedObjects = new List<ObjectModel>
    {
        new ObjectModel { Name = "Object 1", Address = "Address 1" },
        new ObjectModel { Name = "Object 2", Address = "Address 2" },
        new ObjectModel { Name = "Object 3", Address = "Address 3" }
    };

    // New object details
    private string newObjectName;
    private string newObjectAddress;

    // Selected address to track
    private string selectedAddress;

    // Selected object for information popup
    private ObjectModel selectedObject;

    // List of unique addresses
    private List<string> objectAddresses => subscribedObjects.Select(obj => obj.Address).Distinct().ToList();

    // // Add a new object
    private async Task AddObject()
    {

        try
        {
            var spyObject = new SpyModel
                {
                    Id = "ThisIsBecauseIdAtBackEndNeed42CharactersToWorkSoIWriteThisToMakeItWorkPlzWorkGodDammit",
                    SpyName = spyObjectName,
                    adress = newObjectAddress,
                    newobjectName = newObjectName
                };

            var client = ClientFactory.CreateClient();
            var json = JsonSerializer.Serialize(spyObject); // Serialize the User object to JSON

            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await client.PostAsync("https://localhost:7299/api/spyingobject", content);
            if (response.IsSuccessStatusCode)
            {

                StateHasChanged();
                 await GetSpyingObjects();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
      
    }
    protected async Task GetSpyingObjects()
    {
        try
        {
            var client = ClientFactory.CreateClient();
            var response = await client.GetAsync("https://localhost:7299/api/spyingobject");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var spiesList = JsonSerializer.Deserialize<List<SpyModel>>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                spyingObjects = spiesList.Where(spy => spy.SpyName == spyObjectName).ToList();
            }
            else
            {
                Console.WriteLine($"Failed to retrieve spies. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
    // // Remove an object
    // private void RemoveObject(ObjectModel obj)
    // {
    //     subscribedObjects.Remove(obj);
    // }

    // // Show object information popup
    // private void ShowObjectPopup(ObjectModel obj)
    // {
    //     selectedObject = obj;
    //     // JSRuntime.InvokeVoidAsync("$('#objectInfoModal').modal('show')");
    // }
}