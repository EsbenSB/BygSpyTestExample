@page "/Index"

@inject NavigationManager NavManager
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using System.Net.Http
@using System.Net.Http.Json
@using BygSpy.Models
@using System.Text.Json
@using System.Text
@using Microsoft.JSInterop
@inject IHttpClientFactory ClientFactory


<style>
    /* Custom CSS for the notification bubble */
    .notification-badge {
        position: relative;
    }

    .badge {
        position: absolute;
        top: -8px;
        right: -8px;
        padding: 5px 8px;
        border-radius: 50%;
        background-color: red;
        color: white;
        font-size: 12px;
    }
</style>

<h1 class="text-center">Button Grid</h1>

<div class="container">
    <div class="row justify-content-center">
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title">Button 1</h2>
                    <button class="btn btn-primary" @onclick="ShowAddSpyModal">Ny Spy</button>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title">Button 2</h2>
                    @if (loading == true)
                    {
                    @foreach (var spy in spies)
                    {
                    <NavLink class="nav-link" href="subscriptionPage">
                        <button type="button" class="btn btn-primary notification-badge">
                                @spy.Name
                            <span class="badge">3</span>
                        </button>
                    </NavLink>

                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <br />
</div>

<!-- Modal for adding spy -->
<div class="modal" tabindex="-1" role="dialog" style="display: @modalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Spy</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="spyName">Spy Name:</label>
                    <input type="text" class="form-control" id="spyName" @bind="SpyName">
                </div>
            </div>
            <div class="modal-footer">
               
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="AddSpy">Add</button>
            </div>
        </div>
    </div>
</div>

@code {
    string modalDisplay = "none";
    string SpyName = "";
    public BygSpy.Models.User currentUser;
    public List<Spy> spies = new List<Spy>();
    bool loading = false;
    private string Username;

    protected override async void OnInitialized()
    {
        // Retrieve the value of the query parameter from the NavigationManager
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var parameterName = "Username";

        // Check if the query parameters contain the desired parameter
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue(parameterName, out var value))
        {
            // Assign the value to the parameterValue variable
            Username = value;
        }
        spies = await GetSpies();

        loading = true;
    }



    private void ShowAddSpyModal()
    {
        modalDisplay = "block";
    }

    private void CloseModal()
    {
        modalDisplay = "none";
        SpyName = ""; // Clear spy name input
    }

    public async Task AddSpy()
    {
        try
        {
            var spy = new Spy
                {
                    Name = SpyName,
                    User = Username
                };

            var client = ClientFactory.CreateClient();
            var json = JsonSerializer.Serialize(spy); // Serialize the User object to JSON

            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await client.PostAsync("https://localhost:7299/api/spy", content);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }

        CloseModal();
    }
    protected async Task<List<Spy>> GetSpies()
    {
        try
        {
            var client = ClientFactory.CreateClient();
            var response = await client.GetAsync("https://localhost:7299/api/spy");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var spies = JsonSerializer.Deserialize<List<Spy>>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                // Filter out spies whose Name is not equal to Username
                var filteredSpies = spies.Where(spy => spy.User == Username).ToList();
                return filteredSpies;
            }
            else
            {
                Console.WriteLine($"Failed to retrieve spies. Status code: {response.StatusCode}");
                return new List<Spy>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            return new List<Spy>();
        }
    }

}
