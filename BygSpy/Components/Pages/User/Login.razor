@page "/"
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using System.Net.Http
@using System.Net.Http.Json
@using BygSpy.Models
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Login</h2>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <input type="email" id="email" name="email" class="form-control" @bind="email" />
                    </div>
                    <div class="form-group">
                        <label for="password">Password:</label>
                        <input type="password" id="password" name="password" class="form-control" @bind="password" />
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col">
                                <button @onclick="LoginCheck" id="login" name="login" class="btn btn-primary btn-block">Login</button>
                            </div>
                            <div class="col justify-content-end">
                                <NavLink class="nav-link justify-content-end" href="newUser"><button class="btn btn-primary btn-block justify-content-end">Create User</button></NavLink>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string email;
    private string password;
    private string testemail = "esb@mail.com";
    private string testpassword = "5678";
    protected async Task LoginCheck()
    {
        try
        {
            var users = await GetUsers();
            if (users.Any(user => user.Email == email && user.Password == password))
            {
                NavManager.NavigateTo($"/Index?Email={users.FirstOrDefault(user => user.Email == email && user.Password == password).Email.ToString()}");
            }

            //for puppeter test
            if (users.Any(user => user.Email == testemail && user.Password == testpassword))
            {
                NavManager.NavigateTo($"/Index?Email={users.FirstOrDefault(user => user.Email == testemail && user.Password == testpassword).Email.ToString()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }


    protected async Task<List<User>> GetUsers()
    {
        try
        {
            var client = ClientFactory.CreateClient();
            var response = await client.GetAsync("https://localhost:7299/api/users");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var users = JsonSerializer.Deserialize<List<User>>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                return users;
            }
            else
            {
                Console.WriteLine($"Failed to retrieve users. Status code: {response.StatusCode}");
                return new List<User>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            return new List<User>();
        }
    }
}
