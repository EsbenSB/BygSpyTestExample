@page "/"
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using System.Net.Http
@using System.Net.Http.Json
@using BygSpy.Models
@using System.Text.Json
@using System.Text
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Login</h2>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <input type="email" id="email" class="form-control" @bind="email" />
                    </div>
                    <div class="form-group">
                        <label for="password">Password:</label>
                        <input type="password" id="password" class="form-control" @bind="password" />
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col">
                                <button @onclick="LoginCheck" class="btn btn-primary btn-block">Login</button>
                               
                            </div>
                            <div class="col justify-content-end">

                                <NavLink class="nav-link justify-content-end" href="createUserPage"><button class="btn btn-primary btn-block justify-content-end">Create User</button></NavLink>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private string email;
    private string password;

    protected async Task LoginCheck()
    {
        try
        {
            var users = await GetUsers();
            if (users.Any(user => user.Email == email && user.Password == password))
            {
                NavManager.NavigateTo("/Index");
            }



            // foreach (var user in users)
            // {
            //     if (user.Email == email && user.Password == password)
            //     {
                    
            //     }   
            // }
        }
        catch (Exception ex)
        {
           
        }
    }

    protected async Task<List<User>> GetUsers()
    {
        try
        {
            var client = ClientFactory.CreateClient();
            var response = await client.GetAsync("https://localhost:7299/api/users");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var users = JsonSerializer.Deserialize<List<User>>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                return users;
            }
            else
            {
                Console.WriteLine($"Failed to retrieve users. Status code: {response.StatusCode}");
                return new List<User>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            return new List<User>();
        }
    }
}
